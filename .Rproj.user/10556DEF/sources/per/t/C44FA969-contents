---
title: "Exploring the power of ggplot2"
author: Antonio J Morales
output: html_document
---

```{r setup, include=FALSE}
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
```

## Overview of ggplot2

`ggplot2` is a very useful and used package for data visualization in the R community. It implements the "Grammar of Graphics" approach. There are plenty of useful free resources online:

-   [Official package documentation](https://ggplot2.tidyverse.org/)
-   [CheatSheets](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf)
-   The [Data Visualisation](https://r4ds.had.co.nz/data-visualisation.html) and [Graphics for communication](https://r4ds.had.co.nz/graphics-for-communication.html) chapters in R for Data Science Book.

Let's import the `OpenPowerlifting` dataset taken from [Kaggle](https://www.kaggle.com/datasets/open-powerlifting/powerlifting-database):

```{r}
powerlift_data <- read.csv("./data/openpowerlifting2.csv", sep = ";")
str(powerlift_data)
```

Our data set contains results and descriptive data from pretty strong people.

```{r}
head(powerlift_data)
```

Let's explore the main components of a ggplot object (data, aesthetic mapping, geometries) by looking at the relationship between body weight and total score.

```{r}
powerlift_data %>% 
    ggplot(aes(x = Bodyweight, y = Total)) +
    geom_point() +
    labs(x = "Bodyweight (Kg)", y = "Total Score (Kg)")
```

Let's add some transparency:

```{r}

powerlift_data %>% 
    ggplot(aes(x = Bodyweight, y = Total)) +
    geom_point(alpha=0.05) +
    labs(x = "Bodyweight (Kg)", y = "Total Score (Kg)")

```

Modifying aesthetics and adding layers is a piece of cake ! Let's get some color maps on the federations:

```{r}
powerlift_data %>% 
    ggplot(aes(x = Bodyweight, y = Total)) +
    geom_point(aes(color = Federation)) +
    labs(x = "Bodyweight (Kg)", y = "Total Score (Kg)")
```

Although an histogram is a better approach to count the number of powerlifters in each federation.

```{r}
ggplot(powerlift_data, aes(Federation)) +
    geom_bar() +
    labs(x = "Federation", y = "Number of People")
```

Shall we arrange the bars by count?

```{r}
federation_counts <- powerlift_data %>%
    distinct(Name, .keep_all = TRUE) %>%
    group_by(Federation) %>%
    summarise(count = n()) %>%
    arrange(desc(count))

federations_plot <- federation_counts |>
    # filter(count > 500) |>
    ggplot(aes(reorder(Federation, -count), count)) +
    geom_bar(stat = "identity") +
    labs(
        x = "Federation",
        y = "Number of People"
    )

federations_plot
```

Let's improve axis text visibility...

```{r}
federations_plot +
    theme(axis.text.x = element_text(angle = 90))
```

Even more..

```{r}

fedplot3 <- federation_counts %>%
  filter(count > 500) %>%
  ggplot(aes(reorder(Federation, -count), count, fill = Federation == "JPA")) +
  geom_bar(stat = "identity") +
  labs(
    x = "Federation",
    y = "Number of People"
  ) +
  theme(axis.text.x = element_text(angle = 90)) +
  scale_fill_manual(values = c("steelblue", "red"), guide = FALSE)

fedplot3

```

There is a wide range of customization options available in ggplot2. Axes, labels, titles, and legends can be easily modified. Use themes to create consistent and visually appealing visualizations

```{r}

fedplot3 + theme_minimal()

```

Faceting is also an interesting approach very easy to follow in ggplot2 :

```{r}

powerlift_data %>% 
  pivot_longer(cols = c("Squat", "Bench", "Deadlift"), names_to = "exercise") %>% 
  ggplot(aes(x=Bodyweight, y=value))+
  geom_point()+
  facet_grid(.~exercise)

```

```{r}


powerlift_data %>% 
  pivot_longer(cols = c("Squat", "Bench", "Deadlift"), names_to = "exercise") %>% 
  filter(value > 0) %>% 
  ggplot(aes(x=Bodyweight, y=value))+
  geom_point(alpha = 0.05)+
  facet_grid(.~exercise) +
  labs(y="Score (Kg)")

```

What if we need some stats layers?

```{r}

powerlift_data %>% 
  pivot_longer(cols = c("Squat", "Bench", "Deadlift"), names_to = "exercise") %>% 
  filter(value > 0) %>% 
  ggplot(aes(x=Bodyweight, y=value))+
  geom_point(alpha = 0.05)+
  geom_smooth()+
  facet_grid(.~exercise) +
  labs(y="Score (Kg)")


```

Another example of aesthetic manipulation: squat vs. becnh press performance for a given Federation.

```{r}

powerlift_data %>% 
  filter(Federation =="NASA" & Squat > 0 & Bench > 0) %>% 
  ggplot(aes(x=Bench, y=Squat))+
  geom_point(aes(size=Age))

```

`ggplot2` is primarily designed for static visualizations. It's tricky incorporating interactive elements using ggplot2 alone. Although the magic ggplotly function deserves attention.

```{r}

plotly::ggplotly()

```

When multiple comparisons and iterations are needed, ggplot may be used in combination of Shiny to optimize interactions.

```{r}

powerlift_data %>%
  filter(Squat > 0 & Bench > 0) %>% 
  ggplot(aes(x=Bench, y=Squat))+
  geom_point()+
  facet_wrap("Federation")
  
```
